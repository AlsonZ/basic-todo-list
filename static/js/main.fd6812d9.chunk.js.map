{"version":3,"sources":["list/listelement.js","list/list.js","App.js","serviceWorker.js","index.js"],"names":["ListElement","props","useState","editing","setEditing","strikethrough","setStrikethrough","className","onClick","array","elements","splice","index","setElements","text","type","defaultValue","onChange","event","target","value","List","action","setAction","box","setBox","useEffect","checkSavedLists","placeholder","onKeyPress","key","map","object","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA4CeA,MAzCf,SAAqBC,GAAQ,IAAD,EAEIC,oBAAS,GAFb,mBAEnBC,EAFmB,KAEVC,EAFU,OAGgBF,mBAAS,IAHzB,mBAGnBG,EAHmB,KAGJC,EAHI,KA+B1B,OACE,yBAAKC,UAAU,eACb,0BAAMC,QA5BY,WACpB,IAAIC,EAAK,YAAOR,EAAMS,UACtBD,EAAME,OAAOV,EAAMW,MAAO,GAC1BX,EAAMY,YAAYJ,IAyBcF,UAAU,iBAAxC,MACEJ,GAAW,0BAAMK,QAXL,WAEdF,EADmB,sBAAlBD,EACgB,GAEA,sBAOsBE,UAAW,eAAqBF,GAAgBJ,EAAMa,MAC5FX,GAAW,2BAAOY,KAAK,OAAOC,aAAcf,EAAMa,KAAMG,SAlB1C,SAACC,GAClB,IAAIT,EAAK,YAAOR,EAAMS,UACtBD,EAAMR,EAAMW,OAAOE,KAAOI,EAAMC,OAAOC,MACvCnB,EAAMY,YAAYJ,IAe+DF,UAAU,qBACzF,0BAAMC,QA1BY,WAElBJ,GADCD,IAyB6BI,UAAU,eAAxC,YCiBSc,MApDf,WAAiB,IAAD,EAEkBnB,mBAAS,IAF3B,mBAEPQ,EAFO,KAEGG,EAFH,OAGcX,mBAAS,UAHvB,mBAGPoB,EAHO,KAGCC,EAHD,OAIQrB,oBAAS,GAJjB,mBAIPsB,EAJO,KAIFC,EAJE,KAMdC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAkB,WAGtBd,EAAY,GAAD,mBAAKH,GAAL,CACT,CAACI,KAAK,gBACN,CAACA,KAAK,kDACN,CAACA,KAAK,qGAuBV,OACE,yBAAKP,UAAU,aACb,wCAAa,uBAAGC,QArBJ,WACD,UAAVc,GACDC,EAAU,UACVE,GAAO,KAEPF,EAAU,UACVE,GAAO,KAe2BlB,UAAU,kBAAkBe,IAE7DE,GAAO,2BAAOT,KAAK,OAAOa,YAAY,iBAAiBrB,UAAU,kBAAkBsB,WAbrE,SAACX,GACD,UAAdA,EAAMY,MAEPjB,EAAY,GAAD,mBAAKH,GAAL,CAAe,CAACI,KAAKI,EAAMC,OAAOC,UAE7CF,EAAMC,OAAOC,MAAQ,OASpBV,EAASqB,KAAI,SAACC,EAAQpB,GAErB,OAAQ,kBAAC,EAAD,CAAakB,IAAKlB,EAAOA,MAAOA,EAAOC,YAAaA,EAAaH,SAAUA,EAAUI,KAAMkB,EAAOlB,Y,MCpCnGmB,MAVf,WACE,OACE,yBAAK1B,UAAU,cACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,SCIY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fd6812d9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './style.css';\r\n\r\nfunction ListElement(props) {\r\n\r\n  const [editing, setEditing] = useState(false);\r\n  const [strikethrough, setStrikethrough] = useState(\"\");\r\n\r\n  const deleteElement = () => {\r\n    var array = [...props.elements]\r\n    array.splice(props.index, 1);\r\n    props.setElements(array);\r\n  }\r\n  const switchToInput = () => {\r\n    if(editing) {\r\n      setEditing(false);\r\n    } else {\r\n      setEditing(true);\r\n    }\r\n  }\r\n  const addChanges = (event) => {\r\n    var array = [...props.elements]\r\n    array[props.index].text = event.target.value;\r\n    props.setElements(array);\r\n  }\r\n\r\n  const changeCSS = () => {\r\n    if(strikethrough === \"textStrikethrough\") {\r\n      setStrikethrough(\"\");\r\n    } else {\r\n      setStrikethrough(\"textStrikethrough\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"listElement\">\r\n      <span onClick={deleteElement} className=\"deleteElement\">D</span>\r\n      {!editing && <span onClick={changeCSS} className={\"textElement\" + \" \" +strikethrough}>{props.text}</span>}\r\n      {editing && <input type=\"text\" defaultValue={props.text} onChange={addChanges} className=\"editElementInput\"/>}\r\n      <span onClick={switchToInput} className=\"editElement\">✎</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListElement;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ListElement from './listelement';\r\nimport './style.css';\r\n\r\nfunction List() {\r\n\r\n  const [elements, setElements] = useState([]);\r\n  const [action, setAction] = useState(\"➕\");\r\n  const [box, setBox] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkSavedLists();\r\n  }, []);\r\n\r\n  const checkSavedLists = () => {\r\n    // check cookies or w/e to determine if there is a previous list\r\n    // if so turn the + into a - and also put into the state the list\r\n    setElements([...elements, \r\n      {text:\"testing text\"}, \r\n      {text:\"text that is sorta long enough so it just fits\"},\r\n      {text:\"text that is super super long so that i can see how the span handles the super long sentences\"},\r\n    ]);\r\n  }\r\n  \r\n  const openBox = () => {\r\n    if(action == \"➕\") {\r\n      setAction(\"—\");// \"‒ is diff symbol\" \"— is also different\"\r\n      setBox(false);\r\n    } else {\r\n      setAction(\"➕\");\r\n      setBox(true);\r\n    }\r\n  }\r\n\r\n  const addElement = (event) => {\r\n    if(event.key === \"Enter\") {\r\n      // add new element\r\n      setElements([...elements, {text:event.target.value}]);\r\n      // remove value in input\r\n      event.target.value = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Todo-list<i onClick={openBox} className=\"addElementIcon\">{action}</i></h1>\r\n      {/* change box to css so it keeps the text there if u - it */}\r\n      {box && <input type=\"text\" placeholder=\"Add a new Todo\" className=\"addElementInput\" onKeyPress={addElement}/>}\r\n      {elements.map((object, index) => {\r\n        // convert this to context later\r\n        return (<ListElement key={index} index={index} setElements={setElements} elements={elements} text={object.text}></ListElement>);\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport List from './list/list.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"background\">\r\n      <div className=\"body\">\r\n        <List/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}